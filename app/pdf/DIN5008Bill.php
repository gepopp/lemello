<?php

namespace App\pdf;

use Money\Money;
use Carbon\Carbon;
use App\Models\Account;
use App\Models\SubscriptionInvoice;
use Money\Currencies\ISOCurrencies;
use Money\Formatter\IntlMoneyFormatter;



class DIN5008Bill extends \Codedge\Fpdf\Fpdf\Fpdf {





    public function __construct( $orientation = 'P', $unit = 'mm', $size = 'A4' ) {

        parent::__construct( $orientation, $unit, $size );

        $this->SetFont( 'Arial', '', 10 );
        $this->SetMargins( 20, 10, 20 );

    }





    public function Header() {


        $this->Image( public_path( 'images/logo_horizontal.jpg' ), 125, 40, 50 );

        parent::Header(); // TODO: Change the autogenerated stub
    }





    public function senderAddress( $sender = null ) {

        $this->SetXY( 20, 45 );
        $this->SetFont( 'Arial', '', 8 );
        $this->Cell( 0, 5, $sender ?? 'lemollo.com, Hasnerstrasse 18/12-13, 1160 Wien' );


    }





    public function recipientAddress( Account $account ) {

        extract( $account->settings['billingdata'] );

        /**
         * @var $zip
         * @var $city
         * @var $address
         * @var $bill_to
         * @var $country
         * @var $address_addition
         */

        $this->SetXY( 20, 50 );
        $this->SetFont( 'Arial', '', 10 );
        $this->Cell( 0, 5, $bill_to, 0, 1 );
        $this->Cell( 0, 5, $address, 0, 1 );
        if ( ! empty( $address_addition ) ) {
            $this->Cell( 0, 5, $address_addition, 0, 1 );
        }
        $this->Cell( 0, 5, $zip . ' ' . $city, 0, 1 );
        $this->Cell( 0, 5, $country );

    }





    public function metaBlock( SubscriptionInvoice $subscription_invoice ) {

//        dd( $subscription_invoice->stripe );
        $date = Carbon::parse( $subscription_invoice->due_date )->format( 'd.m.Y' );

        $txt = <<<EOM
Rechnungsnummer: $subscription_invoice->id
Datum: $date
E-Mail: gerhard@lemello.com
EOM;


        $this->SetXY( 125, 50 );
        $this->SetFont( 'Arial', '', 10 );
        $this->MultiCell( 0, 5, $txt );


    }





    public function subject() {

        $this->SetXY( 20, 90 );
        $this->SetFont( 'Arial', 'B', 15 );
        $this->Cell( 0, 10, 'Rechnung' );
    }





    public function billTable( SubscriptionInvoice $subscription_invoice ) {


        $this->SetXY( 20, 110 );
        $this->SetFont( 'Arial', 'B', 8 );
        $this->SetFillColor( 240, 240, 240 );

        $this->Cell( 5, 6, '#', 0, 0, 'R', 1 );
        $this->Cell( 60, 6, 'Beschreibung', 0, 0, 'L', 1 );
        $this->Cell( 10, 6, 'Menge', 0, 0, 'R', 1 );
        $this->Cell( 19, 6, 'Einzelp.', 0, 0, 'R', 1 );
        $this->Cell( 19, 6, 'Art', 0, 0, 'L', 1 );
        $this->Cell( 19, 6, 'Netto', 0, 0, 'R', 1 );
        $this->Cell( 19, 6, 'Ust', 0, 0, 'R', 1 );
        $this->Cell( 19, 6, 'Brutto', 0, 1, 'R', 1 );


        foreach ( $subscription_invoice->stripe->lines->data as $key => $line ) {


            $amount         = Money::EUR( $line['amount_excluding_tax'] );
            $item_amount    = Money::EUR( $line['unit_amount_excluding_tax'] );

            $moneyFormatter = new IntlMoneyFormatter(
                new \NumberFormatter( 'de_DE', \NumberFormatter::CURRENCY ),
                new ISOCurrencies()
            );

            $netto = $amount->divide( 12 )->multiply( 10 );
            $item_netto = $item_amount->divide( 12 )->multiply( 10 );

            $this->SetFont( 'Arial', '', 8 );

            $this->Cell( 5, 6, $key + 1, 0, 0, 'R' );
            $this->Cell( 60, 6, $line['description'], 0, 0, 'L' );
            $this->Cell( 10, 6, $line['quantity'], 0, 0, 'R' );
            $this->Cell( 19, 6, $moneyFormatter->format( $item_netto ), 0, 0, 'R' );
            $this->Cell( 18, 6, 'Abo', 0, 0, 'L' );
            $this->Cell( 19, 6, $moneyFormatter->format( $netto ), 0, 0, 'R' );
            $this->Cell( 19, 6, $moneyFormatter->format( $amount->subtract( $netto ) ), 0, 0, 'R' );
            $this->Cell( 19, 6, $moneyFormatter->format( $amount ), 0, 1, 'R' );

        }


    }





    public function Cell( $w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = false, $link = '' ) {


        $txt = iconv( 'UTF-8', 'windows-1252', $txt );

        parent::Cell( $w, $h, $txt, $border, $ln, $align, $fill, $link ); // TODO: Change the autogenerated stub
    }


}
